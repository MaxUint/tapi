// Arm Artillery KBOT (Thud) Script

piece torso, gun, rfirept, lfirept, rgun, lgun;

// Variables

static-var	bMoving, bAiming, bCanAim;
static-var	gun;

// define signals

#define SIG_MOVEMENT	2
#define SIG_AIM		4

#define ANIM_VARIABLE   bMoving
#include "..\anim3d\corthud\walk.bos"
#include "..\anim3d\corthud\walklegs.bos"

// Smoking damage
#define SMOKEPIECE1 torso
#include "smokeunit.h"


MotionControl()
	{
	var	moving, aiming, just_moved;

	// So the stand will get reset
	just_moved = TRUE;

	while (TRUE)
		{
		moving = bMoving;
		aiming = bAiming;

		if (moving)
			{
			if (aiming)
				{
				bCanAim = TRUE;
				call-script walklegs();
				}

			if (NOT aiming)
				{
				bCanAim = FALSE;
				call-script walk();
				}

			just_moved = TRUE;
			}

		if (NOT moving)
			{
			bCanAim = TRUE;

			if (just_moved)
				{
				#define RESTORESPEED <200>

				move pelvis to y-axis 0 speed [1];

				turn rthigh to x-axis 0 speed RESTORESPEED;
				turn rleg to x-axis 0 speed RESTORESPEED;
				turn rfoot to x-axis 0 speed RESTORESPEED;

				turn lthigh to x-axis 0 speed RESTORESPEED;
				turn lleg to x-axis 0 speed RESTORESPEED;
				turn lfoot to x-axis 0 speed RESTORESPEED;

				if (NOT aiming)
					{
					turn torso to y-axis 0 speed <90>;
					turn gun to x-axis 0 speed RESTORESPEED;
					}

				#undef RESTORESPEED

				just_moved = FALSE;
				}

				sleep 100;
			}
		}
	}

Create()
	{
	hide rfirept;
	hide lfirept;

	// Initial State
	bMoving = FALSE;
	bAiming = FALSE;
	bCanAim = TRUE;

	gun = 0;

	// Motion control system
	start-script MotionControl();
	start-script SmokeUnit();
	}

StartMoving()
	{
	bMoving = TRUE;
	}

StopMoving()
	{
	bMoving = FALSE;
	}

SweetSpot(piecenum)
	{
	piecenum=0;
	}

AimFromPrimary(piecenum)
	{
	piecenum=0;		// Aim from the torso
	}

QueryPrimary(piecenum)
	{
	if (gun == 0)
		{
		piecenum=2;
		}
	if (gun == 1)
		{
		piecenum=3;
		}
	}

RestoreAfterDelay()
	{
	// Wait for something to happen
	sleep 2750;

	// If we got this far without being killed, then nothing is
	// happening.  Restore the standard position
	turn torso to y-axis 0 speed <90>;
	turn gun to x-axis 0 speed <45>;

	bAiming = FALSE;
	}

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;					// kill off other aim scripts
	set-signal-mask SIG_AIM;		// so other scripts can kill us

	// Announce that we would like to aim, and wait until we can
	bAiming = TRUE;
	while (NOT bCanAim)
		{
		sleep 100;
		}

	turn torso to y-axis heading speed <90>;
	turn gun to x-axis (0 - pitch) speed <45>;

	wait-for-turn torso around y-axis;
	wait-for-turn gun around x-axis;

	// Start a script that will wait, and restore the standard position if
	// nothing happens after a while.  It inherits the SIG_AIM mask, so
	// it will be killed if a re-aim occurrs
	start-script RestoreAfterDelay();

	return(TRUE);
	}

FirePrimary()
	{
	if (gun == 0)
		{
		// Muzzle flash and recoil
		move rgun to z-axis [-2.0] speed [60];
		show rfirept;
		sleep 100;
		hide rfirept;
		wait-for-move rgun along z-axis;

		// Change guns
		gun = 1;

		// Recoil recover
		move rgun to z-axis [0] speed [4];
		wait-for-move rgun along z-axis;

		return 0;
		}

	if (gun == 1)
		{
		// Muzzle flash and recoil
		move lgun to z-axis [-2.0] speed [60];
		show lfirept;
		sleep 100;
		hide lfirept;
		wait-for-move lgun along z-axis;

		// Change guns
		gun = 0;

		// Recoil recover
		move lgun to z-axis [0] speed [4];
		wait-for-move lgun along z-axis;

		return 0;
		}
	}

#include "EXPtype.h"

Killed( severity, corpsetype )
	{
	hide rfirept;
	hide lfirept;
	if (severity <= 25)
		{
		corpsetype = 1;
		explode ground type	BITMAPONLY | BITMAP1;
		explode gun type	BITMAPONLY | BITMAP2;
		explode lfirept type	BITMAPONLY | BITMAP3;
		explode lfoot type	BITMAPONLY | BITMAP4;
		explode lgun type	BITMAPONLY | BITMAP5;
		explode lleg type	BITMAPONLY | BITMAP1;
		explode lthigh type	BITMAPONLY | BITMAP2;
		explode pelvis type	BITMAPONLY | BITMAP3;
		explode rfirept type	BITMAPONLY | BITMAP3;
		explode rfoot type	BITMAPONLY | BITMAP4;
		explode rgun type	BITMAPONLY | BITMAP5;
		explode rleg type	BITMAPONLY | BITMAP1;
		explode rthigh type	BITMAPONLY | BITMAP2;
		explode torso type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode ground type	FALL | BITMAP1;
		explode gun type	SHATTER | BITMAP2;
		explode lfirept type	FALL | BITMAP3;
		explode lfoot type	FALL | BITMAP4;
		explode lgun type	FALL | BITMAP5;
		explode lleg type	FALL | BITMAP1;
		explode lthigh type	FALL | BITMAP2;
		explode pelvis type	FALL | BITMAP3;
		explode rfirept type	FALL | BITMAP3;
		explode rfoot type	FALL | BITMAP4;
		explode rgun type	FALL | BITMAP5;
		explode rleg type	FALL | BITMAP1;
		explode rthigh type	FALL | BITMAP2;
		explode torso type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type	SHATTER | BITMAP2;
		explode lfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lgun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rgun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode torso type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	corpsetype = 3;
	explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode lfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lgun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rgun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode torso type	BITMAPONLY | BITMAP5;
	return( 0 );
	}
