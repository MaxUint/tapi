// Arm Artillery KBOT (Whopper) Script

piece  pelvis, rfirept, lfirept;

// State variables
static-var	bMoving, bAiming, bCanAim;
static-var	bClosed, bOpened;
static-var	gun;
static-var	restore_delay;

// define signals
#define SIG_MOVEMENT	2
#define SIG_AIM		4


#define	ANIM_VARIABLE   bMoving
#include "..\anim3d\armham\walk.bos"
#include "..\anim3d\armham\walklegs.bos"
#undef	ANIM_VARIABLE
#define	ANIM_VARIABLE   TRUE
#include "..\anim3d\armham\open.bos"
#include "..\anim3d\armham\close.bos"
#undef	ANIM_VARIABLE

// Smoking damage
#define SMOKEPIECE1 torso
#include "smokeunit.h"


MotionControl()
	{
	var	moving, aiming, just_moved;

	// So the stand will get reset
	just_moved = TRUE;

	while (TRUE)
		{
		moving = bMoving;
		aiming = bAiming;

		if (moving)
			{
			if (aiming)
				{
				bCanAim = TRUE;
				call-script walklegs();
				}

			if (NOT aiming)
				{
				bCanAim = FALSE;
				call-script walk();
				}

			just_moved = TRUE;
			}

		if (NOT moving)
			{
			bCanAim = TRUE;

			if (just_moved)
				{
				#define RESTORESPEED <200>

				move pelvis to y-axis 0 speed [1];

				turn rthigh to x-axis 0 speed RESTORESPEED;
				turn rleg to x-axis 0 speed RESTORESPEED;

				turn lthigh to x-axis 0 speed RESTORESPEED;
				turn lleg to x-axis 0 speed RESTORESPEED;

				if (NOT aiming)
					{
					turn torso to y-axis 0 speed <90>;
					}

				#undef RESTORESPEED

				just_moved = FALSE;
				}

				sleep 100;
			}
		}
	}

Create()
	{
	hide rfirept;
	hide lfirept;

	// Initial State
	bMoving = FALSE;
	bAiming = FALSE;
	bCanAim = TRUE;
	bClosed = TRUE;
	bOpened = FALSE;
	dont-shade locase;
	dont-shade lcannon;
	dont-shade rcannon;
	gun = 0;
	restore_delay = 3000;

	// Motion control system
	start-script MotionControl();
	start-script SmokeUnit();
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

StartMoving()
	{
	bMoving = TRUE;
	}

StopMoving()
	{
	bMoving = FALSE;
	}

SweetSpot(piecenum)
	{
	piecenum=0;
	}

RestoreAfterDelay()
	{
	// Wait for something to happen
	sleep restore_delay;

	// If we got this far without being killed, then nothing is
	// happening.  Restore the standard position

	turn torso to y-axis 0 speed <90>;

	set-signal-mask 0;		// We can't die during the cannon process

	// Close cannons
	bOpened = TRUE;
	call-script close();
	sleep 1000;
	bClosed = TRUE;
	bOpened = FALSE;

	wait-for-turn torso around y-axis;
	bAiming = FALSE;
	}

AimPrimary(heading,pitch)
	{
	var	somebody_was_playing_with_my_cannon;
	somebody_was_playing_with_my_cannon = FALSE;

	signal SIG_AIM;					// kill off other aim scripts
	set-signal-mask SIG_AIM;		// so other scripts can kill us

	// Announce that we would like to aim, and wait until we can
	bAiming = TRUE;
	while (!bCanAim || bOpened)
		{
		if (bOpened)
			{
			somebody_was_playing_with_my_cannon = TRUE;
			}
		sleep 100;
		}

	if (somebody_was_playing_with_my_cannon)
		{
		// Kill them, now that they are finished
		set-signal-mask 0;			// Don't kill me!
		signal SIG_AIM;				// Kill off other aim scripts
		set-signal-mask SIG_AIM;	// Okay.  Other scripts can kill us now
		}

	// Begin aiming
	turn torso to y-axis heading speed <90>;
	wait-for-turn torso around y-axis;
	// Draw the weapon
	if (bClosed)
		{
		set-signal-mask 0;			// We can't die while drawing the gun
		bOpened = TRUE;
		call-script open();
		sleep 1000;
		bClosed = FALSE;
		bOpened = FALSE;
		set-signal-mask SIG_AIM;	// Okay, the weapon is out.  We are at the mercy of other scripts.
		}
	start-script RestoreAfterDelay();

	return( TRUE );
	}

AimFromPrimary(piecenum)
	{
	piecenum=0;		// Aim from the torso
	}

QueryPrimary(piecenum)
	{
	if (gun == 0)
		{
		piecenum=1;
		}
	if (gun == 1)
		{
		piecenum=2;
		}
	}

FirePrimary()
	{
	if (gun == 0)
		{
		// Change guns
		gun = 1;

		// Muzzle flare and recoil
		show rfirept;
		move rcannon to z-axis [-2.0] speed [25];
		sleep 100;
		hide rfirept;
		
		// Recoil recover
		move rcannon to z-axis [0] speed [0.75];
		
		return( 0 );
		}

	if (gun == 1)
		{
		// Change guns
		gun = 0;

		// Muzzle flare and recoil
		show lfirept;
		move lcannon to z-axis [-2.0] speed [25];
		sleep 100;
		hide lfirept;

		// Recoil recover
		move lcannon to z-axis [0] speed [0.75];
		}
	}

#include "EXPtype.h"

Killed( severity, corpsetype )
	{
	hide rfirept;
	hide lfirept;
	if (severity <= 25)
		{
		corpsetype = 1;
		explode canbase type	BITMAPONLY | BITMAP1;
		explode ground type	BITMAPONLY | BITMAP2;
		explode lcannon type	BITMAPONLY | BITMAP3;
		explode lfirept type	BITMAPONLY | BITMAP4;
		explode lfoot type	BITMAPONLY | BITMAP5;
		explode lleg type	BITMAPONLY | BITMAP1;
		explode locase type	BITMAPONLY | BITMAP2;
		explode lthigh type	BITMAPONLY | BITMAP3;
		explode pelvis type	BITMAPONLY | BITMAP4;
		explode rcannon type	BITMAPONLY | BITMAP5;
		explode rfirept type	BITMAPONLY | BITMAP2;
		explode rfoot type	BITMAPONLY | BITMAP3;
		explode rleg type	BITMAPONLY | BITMAP4;
		explode upcase2 type	BITMAPONLY | BITMAP5;
		explode rthigh type	BITMAPONLY | BITMAP1;
		explode torso type	BITMAPONLY | BITMAP2;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode canbase type	BITMAPONLY | BITMAP1;
		explode ground type	FALL | BITMAP2;
		explode lcannon type	SHATTER | BITMAP3;
		explode lfirept type	FALL | BITMAP4;
		explode lfoot type	FALL | BITMAP5;
		explode lleg type	FALL | BITMAP1;
		explode locase type	FALL | BITMAP2;
		explode lthigh type	FALL | BITMAP3;
		explode pelvis type	FALL | BITMAP4;
		explode rcannon type	SHATTER | BITMAP5;
		explode rfirept type	FALL | BITMAP1;
		explode rfoot type	FALL | BITMAP2;
		explode rleg type	FALL | BITMAP3;
		explode upcase2 type	FALL | BITMAP4;
		explode rthigh type	FALL | BITMAP5;
		explode torso type	BITMAPONLY | BITMAP1;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode canbase type	BITMAPONLY | BITMAP1;
		explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lcannon type	SHATTER | BITMAP3;
		explode lfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode locase type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pelvis type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rcannon type	SHATTER | BITMAP5;
		explode rfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode upcase2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type	BITMAPONLY | BITMAP1;
		return( 0 );
		}

	corpsetype = 3;
	explode canbase type	BITMAPONLY | BITMAP1;
	explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lcannon type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode lfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode locase type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rcannon type	SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rfirept type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode upcase2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type	BITMAPONLY | BITMAP1;
	return( 0 );
	}
