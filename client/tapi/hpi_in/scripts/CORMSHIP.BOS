// Core Missile Ship

piece  rocket1,rocket2,missile1,missile2,missile3,base,platform,gun;

static-var ready,fire1,fire2,restore_delay;

#define SIG_AIM1	2
#define SIG_AIM2	4
#define	SIG_WAKE	8
#define SMOKEPIECE1 base
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "..\anim3d\cormship\activatescr.bos"
#include "..\anim3d\cormship\deactivatescr.bos"
#include "smokeunit.h"
#include "exptype.h"
#include "SFXtype.h"

Go()
	{
	show rocket1;
	show rocket2;
	call-script activatescr();
	sleep 1500;
	ready = TRUE;
	}

Stop()
	{
	ready = FALSE;
	sleep 1500;
	call-script deactivatescr();
	sleep 1500;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"	// Second time (of two)

Create()
	{
	fire1=1;
	fire2=1;
	ready = FALSE;
	restore_delay=3000;
	call-script InitState();
	start-script SmokeUnit();
	while(get BUILD_PERCENT_LEFT)
		{
		sleep 1000;
		}
	spin dish around y-axis speed <150>;
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

RestoreAfterDelay()
	{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState( INACTIVE );
	turn turret to y-axis (0) speed <70>;
	turn gun to x-axis (0) speed <30>;
	}

StartMoving()
	{
	signal SIG_WAKE;
	set-signal-mask SIG_WAKE;
	while (TRUE)
		{
		emit-sfx SFXTYPE_WAKE1 from wake1;
		emit-sfx SFXTYPE_WAKE1 from wake2;
		sleep 300;
		}
	}

StopMoving()
	{
	signal SIG_WAKE;
	}

AimPrimary(heading,pitch)
	{
	start-script RequestState( ACTIVE );
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	while (!ready)
		{
		sleep( 250 );
		}
	start-script RestoreAfterDelay();
	return(TRUE);
	}

AimSecondary(heading,pitch)
	{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret to y-axis heading speed <70>;
	turn gun to x-axis (0-pitch) speed <30>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return(TRUE);
	}

FirePrimary()
	{
	if (fire1==1) {
		hide rocket1;
		fire1 = 2;
		return(0); }
	if (fire1==2) {
		hide rocket2;
		ready = FALSE;
		call-script RequestState( INACTIVE );
		fire1 = 1;
		return(0); }
	}

AimFromPrimary(piecenum)
	{
	piecenum = 1;
	}

AimFromSecondary(piecenum)
	{
	piecenum = gun;
	}

QueryPrimary(piecenum)
	{
	if (fire1==1) {
		piecenum=rocket1; }
	if (fire1==2) {
		piecenum=rocket2; }
	}

QuerySecondary(piecenum)
	{
	piecenum=missile2;
	}

SweetSpot(piecenum)
	{
	piecenum=base;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode dish type	BITMAPONLY | BITMAP2;
		explode door1a type	BITMAPONLY | BITMAP3;
		explode door1b type	BITMAPONLY | BITMAP4;
		explode door2a type	BITMAPONLY | BITMAP5;
		explode door2b type	BITMAPONLY | BITMAP1;
		explode gun type	BITMAPONLY | BITMAP2;
		explode hamper type	BITMAPONLY | BITMAP3;
		explode missile1 type	BITMAPONLY | BITMAP4;
		explode missile2 type	BITMAPONLY | BITMAP5;
		explode missile3 type	BITMAPONLY | BITMAP1;
		explode platform type	BITMAPONLY | BITMAP2;
		explode rocket1 type	BITMAPONLY | BITMAP3;
		explode rocket2 type	BITMAPONLY | BITMAP4;
		explode stand type	BITMAPONLY | BITMAP5;
		explode turret type	BITMAPONLY | BITMAP1;
		explode wake1 type	BITMAPONLY | BITMAP2;
		explode wake1 type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	BITMAPONLY | BITMAP1;
		explode dish type	FALL | BITMAP2;
		explode door1a type	FALL | BITMAP3;
		explode door1b type	FALL | BITMAP4;
		explode door2a type	FALL | BITMAP5;
		explode door2b type	FALL | BITMAP1;
		explode gun type	FALL | BITMAP2;
		explode hamper type	SHATTER | BITMAP3;
		explode missile1 type	FALL | BITMAP4;
		explode missile2 type	FALL | BITMAP5;
		explode missile3 type	FALL | BITMAP1;
		explode platform type	BITMAPONLY | BITMAP2;
		explode rocket1 type	FALL | BITMAP3;
		explode rocket2 type	FALL | BITMAP4;
		explode stand type	BITMAPONLY | BITMAP5;
		explode turret type	FALL | BITMAP1;
		explode wake1 type	FALL | BITMAP2;
		explode wake1 type	FALL | BITMAP3;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	BITMAPONLY | BITMAP1;
		explode dish type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door2a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door2b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hamper type	SHATTER | BITMAP3;
		explode missile1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode missile2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode missile3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode platform type	BITMAPONLY | BITMAP2;
		explode rocket1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rocket2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode stand type	BITMAPONLY | BITMAP5;
		explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return( 0 );
		}

	corpsetype = 3;
	explode base type	BITMAPONLY | BITMAP1;
	explode dish type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door2a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door2b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hamper type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode missile1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode missile2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode missile3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode platform type	BITMAPONLY | BITMAP2;
	explode rocket1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rocket2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode stand type	BITMAPONLY | BITMAP5;
	explode turret type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return( 0 );
	}
