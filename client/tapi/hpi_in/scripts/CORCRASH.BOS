// Core Jethro KBOT

piece	firept1, firept2, turret, gunbase, pelvis;

// Variables

static-var	gun;
static-var	restore_delay;

// Signals

#define SIG_MOVEMENT 2
#define SIG_AIM		4

// Animations

#define ANIM_VARIABLE   TRUE
#include "..\anim3d\corcrash\walk.bos"

// Smoking damage
#define SMOKEPIECE1 turret
#include "smokeunit.h"


StartMoving()
	{
	signal SIG_MOVEMENT;            // kill off other move scripts
	set-signal-mask SIG_MOVEMENT;   // so other scripts can kill us

	call-script walk();             // Initiate walk cycle
	}

StopMoving()
	{
	signal SIG_MOVEMENT;            // kill off other move scripts
	set-signal-mask SIG_MOVEMENT;   // so other scripts can kill us

	// Restore the standard position

	#define RESTORESPEED <150>
	// Obviously I have not implemented this.  So there.
	#undef RESTORESPEED
	}

Create()
	{
	gun = 0;
	restore_delay = 3000;
	start-script StopMoving();			// Set standard position
	start-script SmokeUnit();
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

SweetSpot(piecenum)
	{
	piecenum = 4;
	}

AimFromPrimary(piecenum)
	{
	piecenum = 2;		// Aim from the turret
	}

QueryPrimary(piecenum)
	{
	piecenum = gun;	// This only works because I put the flashes first
	}

RestoreAfterDelay()
	{
	// Wait for something to happen
	sleep restore_delay;

	// If we got this far without being killed, then nothing is
	// happening.  Restore the standard position
	turn turret to y-axis 0 speed <90>;
	turn gunbase to x-axis 0 speed <45>;
	}

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;					// kill off other aim scripts
	set-signal-mask SIG_AIM;		// so other scripts can kill us

	turn turret to y-axis heading speed <225>;
	turn gunbase to x-axis (0 - pitch) speed <150>;

	wait-for-turn turret around y-axis;
	wait-for-turn gunbase around x-axis;

	// Start a script that will wait, and restore the standard position if
	// nothing happens after a while.  It inherits the SIG_AIM mask, so
	// it will be killed if a re-aim occurrs
	start-script RestoreAfterDelay();

	return(TRUE);
	}

FirePrimary()
	{
	if (gun == 0)
		{
		// Change guns
		gun = 1;

		// Recoil
		move gun1 to z-axis [-1.5] speed [25];
		wait-for-move gun1 along z-axis;
		move gun1 to z-axis [0] speed [0.75];

		return( 0 );
		}

	if (gun == 1)
		{
		// Change guns
		gun = 0;

		// Recoil
		move gun2 to z-axis [-1.5] speed [25];
		wait-for-move gun2 along z-axis;
		move gun2 to z-axis [0] speed [0.75];
		}
	}


#include "EXPtype.h"

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode firept1 type	BITMAPONLY | BITMAP1;
		explode firept2 type	BITMAPONLY | BITMAP2;
		explode ground type	BITMAPONLY | BITMAP3;
		explode gun1 type	BITMAPONLY | BITMAP4;
		explode gun2 type	BITMAPONLY | BITMAP5;
		explode gunbase type	BITMAPONLY | BITMAP1;
		explode lleg type	BITMAPONLY | BITMAP2;
		explode pelvis type	BITMAPONLY | BITMAP3;
		explode rleg type	BITMAPONLY | BITMAP4;
		explode turret type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode firept1 type	FALL | BITMAP1;
		explode firept2 type	FALL | BITMAP2;
		explode ground type	FALL | BITMAP3;
		explode gun1 type	FALL | BITMAP4;
		explode gun2 type	FALL | BITMAP5;
		explode gunbase type	BITMAPONLY | BITMAP1;
		explode lleg type	FALL | BITMAP2;
		explode pelvis type	BITMAPONLY | BITMAP3;
		explode rleg type	FALL | BITMAP4;
		explode turret type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode firept1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode firept2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunbase type	BITMAPONLY | BITMAP1;
		explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type	BITMAPONLY | BITMAP3;
		explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	corpsetype = 3;
	explode firept1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode firept2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunbase type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type	BITMAPONLY | BITMAP3;
	explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type	BITMAPONLY | BITMAP5;
	return( 0 );
	}
