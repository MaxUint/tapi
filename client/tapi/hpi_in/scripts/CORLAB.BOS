// Core Mech Lab Script

piece base,pad,beam1,beam2;

static-var spray,unitviewer;

#define	SIG_ACTIVATE	2
#define SMOKEPIECE1 base
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "..\anim3d\corlab\activatescr.bos"
#include "..\anim3d\corlab\deactivatescr.bos"
#include "smokeunit.h"
#include "exptype.h"
#include "yard.h"

Go()
	{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache lbox1;
	dont-cache lbox2;
	dont-cache ldoor1;
	dont-cache ldoor2;
	dont-cache lower1;
	dont-cache lower2;
	dont-cache pad;
	dont-cache ubox1;
	dont-cache ubox2;
	dont-cache udoor1;
	dont-cache udoor2;
	dont-cache upper1;
	dont-cache upper2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to TRUE;
	}

Stop()
	{
	set INBUILDSTANCE to FALSE;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache gun1;
	cache gun2;
	cache lbox1;
	cache lbox2;
	cache ldoor1;
	cache ldoor2;
	cache lower1;
	cache lower2;
	cache pad;
	cache ubox1;
	cache ubox2;
	cache udoor1;
	cache udoor2;
	cache upper1;
	cache upper2;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"

Create()
	{
	dont-shade blink;
	dont-cache blink;

	dont-shade beam1;
	dont-shade beam2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade lbox1;
	dont-shade lbox2;
	dont-shade ldoor1;
	dont-shade ldoor2;
	dont-shade lower1;
	dont-shade lower2;
	dont-shade pad;
	dont-shade ubox1;
	dont-shade ubox2;
	dont-shade udoor1;
	dont-shade udoor2;
	dont-shade upper1;
	dont-shade upper2;
	unitviewer = FALSE;
	spray=0;
	call-script InitState();
	start-script SmokeUnit();
	}

QueryNanoPiece(piecenum)
	{
	if( spray == 0 )
		{
		piecenum=beam1;
		}
	if( spray != 0 )
		{
		piecenum=beam2;
		}
	spray = !spray;
	}

Demo()
	{
	unitviewer = TRUE;
	}

Activate()
	{
	signal SIG_ACTIVATE;
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if (!unitviewer)
		{
		sleep 5000;
		}
	set-signal-mask 0;
	start-script RequestState( INACTIVE );
	}

StartBuilding()
	{
	spin pad around y-axis speed <30>;
	}


StopBuilding()
	{
	stop-spin pad around y-axis;
	}

QueryBuildInfo(piecenum)
	{
	piecenum=pad;
	}

SweetSpot(piecenum)
	{
	piecenum=base;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode beam1 type	BITMAPONLY | BITMAP2;
		explode beam2 type	BITMAPONLY | BITMAP3;
		explode blink type	BITMAPONLY | BITMAP4;
		explode gun1 type	BITMAPONLY | BITMAP5;
		explode gun2 type	BITMAPONLY | BITMAP1;
		explode lbox1 type	BITMAPONLY | BITMAP2;
		explode lbox2 type	BITMAPONLY | BITMAP3;
		explode ldoor1 type	BITMAPONLY | BITMAP4;
		explode ldoor2 type	BITMAPONLY | BITMAP5;
		explode lower1 type	BITMAPONLY | BITMAP1;
		explode lower2 type	BITMAPONLY | BITMAP2;
		explode pad type	BITMAPONLY | BITMAP3;
		explode ubox1 type	BITMAPONLY | BITMAP4;
		explode ubox2 type	BITMAPONLY | BITMAP5;
		explode udoor1 type	BITMAPONLY | BITMAP5;
		explode udoor2 type	BITMAPONLY | BITMAP5;
		explode upper1 type	BITMAPONLY | BITMAP5;
		explode upper2 type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	BITMAPONLY | BITMAP1;
		explode beam1 type	FALL | BITMAP2;
		explode beam2 type	FALL | BITMAP3;
		explode blink type	FALL | BITMAP4;
		explode gun1 type	FALL | BITMAP5;
		explode gun2 type	FALL | BITMAP1;
		explode lbox1 type	FALL | BITMAP2;
		explode lbox2 type	FALL | BITMAP3;
		explode ldoor1 type	FALL | BITMAP4;
		explode ldoor2 type	FALL | BITMAP5;
		explode lower1 type	BITMAPONLY | BITMAP1;
		explode lower2 type	BITMAPONLY | BITMAP2;
		explode pad type	BITMAPONLY | BITMAP3;
		explode ubox1 type	FALL | BITMAP4;
		explode ubox2 type	FALL | BITMAP5;
		explode udoor1 type	FALL | BITMAP5;
		explode udoor2 type	FALL | BITMAP5;
		explode upper1 type	SHATTER | BITMAP5;
		explode upper2 type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	BITMAPONLY | BITMAP1;
		explode beam1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lbox1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbox2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ldoor1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ldoor2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lower1 type	BITMAPONLY | BITMAP1;
		explode lower2 type	BITMAPONLY | BITMAP2;
		explode pad type	BITMAPONLY | BITMAP3;
		explode ubox1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ubox2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode udoor1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode udoor2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode upper1 type	SHATTER | BITMAP5;
		explode upper2 type	BITMAPONLY | BITMAP5;
		return( 0 );
		}

	corpsetype = 3;
	explode base type	BITMAPONLY | BITMAP1;
	explode beam1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lbox1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbox2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ldoor1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode ldoor2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lower1 type	BITMAPONLY | BITMAP1;
	explode lower2 type	BITMAPONLY | BITMAP2;
	explode pad type	BITMAPONLY | BITMAP3;
	explode ubox1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode ubox2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode udoor1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode udoor2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode upper1 type	SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode upper2 type	BITMAPONLY | BITMAP5;
	return( 0 );
	}
