// Arm Vehicle Plant Script

piece base,pad,beam1,beam2;

static-var spray,unitviewer;

#define	SIG_ACTIVATE	2
#define SMOKEPIECE1 base
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "..\anim3d\armvp\activatescr.bos"
#include "..\anim3d\armvp\deactivatescr.bos"
#include "smokeunit.h"
#include "exptype.h"
#include "yard.h"

Go()
	{
	dont-cache doo2;
	dont-cache door1;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache plate1;
	dont-cache plate2;
	dont-cache post1;
	dont-cache post2;
	dont-cache side1;
	dont-cache side2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to TRUE;
	}

Stop()
	{
	set INBUILDSTANCE to FALSE;
	call-script CloseYard();
	call-script deactivatescr();
	cache doo2;
	cache door1;
	cache nano1;
	cache nano2;
	cache pad;
	cache plate1;
	cache plate2;
	cache post1;
	cache post2;
	cache side1;
	cache side2;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"	// Second time (of two)

Create()
	{
	dont-shade doo2;
	dont-shade door1;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade plate1;
	dont-shade plate2;
	dont-shade post1;
	dont-shade post2;
	dont-shade side1;
	dont-shade side2;
	unitviewer = FALSE;
	spray=0;
	call-script InitState();
	start-script SmokeUnit();
	}

QueryNanoPiece(piecenum)
	{
	if( spray == 0 )
		{
		piecenum=beam1;
		}
	if( spray != 0 )
		{
		piecenum=beam2;
		}
	spray = !spray;
	}

Demo()
	{
	unitviewer = TRUE;
	}

Activate()
	{
	signal SIG_ACTIVATE;
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if (!unitviewer)
		{
		sleep 5000;
		}
	set-signal-mask 0;
	start-script RequestState( INACTIVE );
	}

StartBuilding()
	{
	spin pad around y-axis speed <30>;
	}

StopBuilding()
	{
	stop-spin pad around y-axis;
	}

QueryBuildInfo(piecenum)
	{
	piecenum=pad;
	}

SweetSpot(piecenum)
	{
	piecenum=base;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode doo2 type	BITMAPONLY | BITMAP4;
		explode door1 type	BITMAPONLY | BITMAP5;
		explode nano1 type	BITMAPONLY | BITMAP1;
		explode nano2 type	BITMAPONLY | BITMAP2;
		explode pad type	BITMAPONLY | BITMAP3;
		explode plate1 type	BITMAPONLY | BITMAP4;
		explode plate2 type	BITMAPONLY | BITMAP5;
		explode post1 type	BITMAPONLY | BITMAP1;
		explode post2 type	BITMAPONLY | BITMAP2;
		explode side1 type	BITMAPONLY | BITMAP3;
		explode side2 type	BITMAPONLY | BITMAP4;
		return( 0 );
	}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	BITMAPONLY | BITMAP1;
		explode doo2 type	FALL | BITMAP4;
		explode door1 type	BITMAPONLY | BITMAP5;
		explode nano1 type	BITMAPONLY | BITMAP1;
		explode nano2 type	FALL | BITMAP2;
		explode pad type	BITMAPONLY | BITMAP3;
		explode plate1 type	SHATTER | BITMAP4;
		explode plate2 type	BITMAPONLY | BITMAP5;
		explode post1 type	FALL | BITMAP1;
		explode post2 type	FALL | BITMAP2;
		explode side1 type	BITMAPONLY | BITMAP3;
		explode side2 type	BITMAPONLY | BITMAP4;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	BITMAPONLY | BITMAP1;
		explode doo2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door1 type	BITMAPONLY | BITMAP5;
		explode nano1 type	BITMAPONLY | BITMAP1;
		explode nano2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pad type	BITMAPONLY | BITMAP3;
		explode plate1 type	SHATTER | BITMAP4;
		explode plate2 type	SHATTER | BITMAP5;
		explode post1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode post2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode side1 type	BITMAPONLY | BITMAP3;
		explode side2 type	BITMAPONLY | BITMAP4;
		return( 0 );
		}

	corpsetype = 3;
	explode base type	BITMAPONLY | BITMAP1;
	explode doo2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door1 type	BITMAPONLY | BITMAP5;
	explode nano1 type	BITMAPONLY | BITMAP1;
	explode nano2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pad type	BITMAPONLY | BITMAP3;
	explode plate1 type	SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode plate2 type	SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode post1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode post2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode side1 type	BITMAPONLY | BITMAP3;
	explode side2 type	BITMAPONLY | BITMAP4;
	return( 0 );
	}
