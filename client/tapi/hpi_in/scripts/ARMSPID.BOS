// ARMSPID - Arm Spider Script

piece base, turret, barrel1, barrel2, flare1, flare2;

static-var	bMoving;
static-var	restore_delay;
static-var	gun;

#include "EXPtype.h"

#define SIG_AIM 2

#define	ANIM_VARIABLE   bMoving
#include "..\anim3d\armspid\walk2.bos"
#undef	ANIM_VARIABLE

// Smoking damage
#define SMOKEPIECE1 base
#include "smokeunit.h"

MotionControl()
	{
	var	moving;

	while (TRUE)
		{
		moving = bMoving;

		if (moving)
			{
			call-script walk2();
			}
		if (NOT moving)
			{
			sleep 100;
			}
		}
	}

Create()
	{
	hide flare1;
	hide flare2;

	bMoving = FALSE;
	gun = 0;
	restore_delay = 3000;

	// Motion control system
	start-script MotionControl();
	start-script SmokeUnit();
	}

StartMoving()
	{
	bMoving = TRUE;
	}

StopMoving()
	{
	bMoving = FALSE;
	}

SweetSpot(piecenum)
	{
	piecenum=0;
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

RestoreAfterDelay()
	{
	// Wait for something to happen
	sleep restore_delay;

	// If we got this far without being signaled, then nothing is
	// happening.  Restore the standard position

	turn turret to y-axis 0 speed <90>;
	turn turret to x-axis 0 speed <90>;
//	turn barrel1 to x-axis 0 speed <50>;
//	turn barrel2 to x-axis 0 speed <50>;

	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
//	wait-for-turn barrel1 around x-axis;
//	wait-for-turn barrel2 around x-axis;
	}

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;				// kill off other aim scripts
	set-signal-mask SIG_AIM;	// so other scripts can kill us

	turn turret to y-axis heading speed <90>;
	turn turret to x-axis (0-pitch) speed <90>;
//	turn barrel1 to x-axis (0-pitch) speed <50>;
//	turn barrel2 to x-axis (0-pitch) speed <50>;

	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
//	wait-for-turn barrel1 around x-axis;
//	wait-for-turn barrel2 around x-axis;

	// Start a script that will wait, and restore the standard position if
	// nothing happens after a while.  It inherits the SIG_AIM mask, so
	// it will be killed if a re-aim occurrs
	start-script RestoreAfterDelay();

	return(TRUE);
	}

FirePrimary()
	{
	if (gun == 0)
		{
		// Muzzle flash and recoil
//		show flare1;
		move barrel1 to z-axis [-1.25] speed [500];
//		sleep 150;
//		hide flare1;

		// Recoil recover
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0] speed [3.0];

		// Switch guns
		gun = 1;
		return( 0 );
		}

	if (gun == 1)
		{
		// Muzzle flash and recoil
//		show flare2;
		move barrel2 to z-axis [-1.25] speed [500];
//		sleep 150;
//		hide flare2;

		// Recoil recover
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0] speed [3.0];

		// Switch guns
		gun = 0;
		return( 0 );
		}
	}

AimFromPrimary(piecenum)
	{
	piecenum=1;		// Aim from the turret
	}

QueryPrimary(piecenum)
	{
	if (gun == 0)
		{
		piecenum = 4;
		return( 0 );
		}
	if (gun == 1)
		{
		piecenum = 5;
		return( 0 );
		}
	}


Killed( severity, corpsetype )
	{
	hide flare1;
	hide flare2;
	if (severity <= 25)
		{
		corpsetype = 1;
		explode barrel1 type	BITMAPONLY | BITMAP1;
		explode barrel2 type	BITMAPONLY | BITMAP2;
		explode base type	BITMAPONLY | BITMAP3;
		explode flare1 type	BITMAPONLY | BITMAP4;
		explode flare2 type	BITMAPONLY | BITMAP5;
		explode leg1 type	BITMAPONLY | BITMAP1;
		explode leg2 type	BITMAPONLY | BITMAP2;
		explode leg3 type	BITMAPONLY | BITMAP3;
		explode leg4 type	BITMAPONLY | BITMAP4;
		explode leg5 type	BITMAPONLY | BITMAP5;
		explode leg6 type	BITMAPONLY | BITMAP1;
		explode turret type	BITMAPONLY | BITMAP2;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode barrel1 type	FALL | BITMAP1;
		explode barrel2 type	FALL | BITMAP2;
		explode base type	BITMAPONLY | BITMAP3;
		explode flare1 type	FALL | BITMAP4;
		explode flare2 type	FALL | BITMAP5;
		explode leg1 type	FALL | BITMAP1;
		explode leg2 type	FALL | BITMAP2;
		explode leg3 type	FALL | BITMAP3;
		explode leg4 type	FALL | BITMAP4;
		explode leg5 type	FALL | BITMAP5;
		explode leg6 type	FALL | BITMAP1;
		explode turret type	SHATTER | BITMAP2;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode barrel1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type	BITMAPONLY | BITMAP3;
		explode flare1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type	SHATTER | BITMAP2;
		return( 0 );
		}

	corpsetype = 3;
	explode barrel1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type	BITMAPONLY | BITMAP3;
	explode flare1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg5 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg6 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return( 0 );
	}
