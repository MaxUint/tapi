// Arm Fido (KBOT) script

piece	gauss, turret, flash;

static-var restore_delay;

#define SIG_MOVEMENT	2
#define SIG_AIM		4

#define	ANIM_VARIABLE   TRUE
#include "..\anim3d\armfido\walk.bos"
#undef	ANIM_VARIABLE


// Smoking damage
#define SMOKEPIECE1 torso
#include "smokeunit.h"

Create()
	{
	hide flash;
	dont-cache flash;

	restore_delay=3000;
	start-script SmokeUnit();
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

StartMoving()
	{
	signal SIG_MOVEMENT;            // kill off other movement scripts
	set-signal-mask SIG_MOVEMENT;   // so other scripts can kill us

	start-script walk();
	}

StopMoving()
	{
	signal SIG_MOVEMENT;            // kill off any movement scripts
	}

SweetSpot(piecenum)
	{
	piecenum=0;
	}

RestoreAfterDelay()
	{
	// Wait for something to happen
	sleep restore_delay;

	// If we got this far without being killed, then nothing is
	// happening.  Restore the standard position

	turn turret to y-axis 0 speed <90>;
	turn gauss to x-axis 0 speed <50>;

	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	}

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;				// kill off other aim scripts
	set-signal-mask SIG_AIM;	// so other scripts can kill us

	turn turret to y-axis heading speed <90>;
	turn gauss to x-axis (0-pitch) speed <50>;

	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;

	// Start a script that will wait, and restore the standard position if
	// nothing happens after a while.  It inherits the SIG_AIM mask, so
	// it will be killed if a re-aim occurrs
	start-script RestoreAfterDelay();

	return(TRUE);
	}

FirePrimary()
	{
	show flash;
	sleep 150;
	hide flash;
	}

QueryPrimary(piecenum)
	{
	piecenum=2;
	}

#include "EXPtype.h"

Killed( severity, corpsetype )
	{
	hide flash;
	if (severity <= 25)
		{
		corpsetype = 1;

		// Blow off the pieces in varied ways
		explode flash type	BITMAPONLY | BITMAP1;
		explode gauss type	BITMAPONLY | BITMAP2;
		explode ground type	BITMAPONLY | BITMAP3;
		explode lfoot type	BITMAPONLY | BITMAP4;
		explode lhand type	BITMAPONLY | BITMAP5;
		explode lleg type	BITMAPONLY | BITMAP1;
		explode lloarm type	BITMAPONLY | BITMAP2;
		explode lthigh type	BITMAPONLY | BITMAP3;
		explode luparm type	BITMAPONLY | BITMAP4;
		explode pelvis type	BITMAPONLY | BITMAP5;
		explode rfoot type	BITMAPONLY | BITMAP1;
		explode rhand type	BITMAPONLY | BITMAP2;
		explode rleg type	BITMAPONLY | BITMAP3;
		explode rloarm type	BITMAPONLY | BITMAP4;
		explode rthigh type	BITMAPONLY | BITMAP5;
		explode ruparm type	BITMAPONLY | BITMAP1;
		explode torso type	BITMAPONLY | BITMAP2;
		explode turret type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;

		// Blow off the pieces in varied ways
		explode flash type	FALL | BITMAP1;
		explode gauss type	SHATTER | BITMAP2;
		explode ground type	FALL | BITMAP3;
		explode lfoot type	FALL | BITMAP4;
		explode lhand type	FALL | BITMAP5;
		explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type	FALL | BITMAP2;
		explode lthigh type	FALL | BITMAP3;
		explode luparm type	FALL | BITMAP4;
		explode pelvis type	BITMAPONLY | BITMAP5;
		explode rfoot type	FALL | BITMAP1;
		explode rhand type	FALL | BITMAP2;
		explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type	FALL | BITMAP4;
		explode rthigh type	FALL | BITMAP5;
		explode ruparm type	FALL | BITMAP1;
		explode torso type	BITMAPONLY | BITMAP2;
		explode turret type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;

		// Blow off the pieces in varied ways
		explode flash type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gauss type	SHATTER | BITMAP2;
		explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhand type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode luparm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type	BITMAPONLY | BITMAP5;
		explode rfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rhand type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ruparm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type	BITMAPONLY | BITMAP2;
		explode turret type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	// If severity is over 50, the unit just disintigrated.
	corpsetype = 3;

	explode flash type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gauss type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode ground type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhand type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lloarm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode luparm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type	BITMAPONLY | BITMAP5;
	explode rfoot type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rhand type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ruparm type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type	BITMAPONLY | BITMAP2;
	explode turret type	BITMAPONLY | BITMAP3;
	return( 0 );
	}
