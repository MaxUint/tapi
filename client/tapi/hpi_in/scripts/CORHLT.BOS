// Core Laser Battery

piece base,flare,turret;

static-var fire;

#define SIG_AIM 2
#define SMOKEPIECE1 base

#include "smokeunit.h"
#include "EXPtype.h"

Create()
	{
	hide flare;
	dont-cache flare;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache gun3;
	dont-cache spindle;
	dont-cache turret;
	dont-cache stand;
	dont-shade flare;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade gun3;
	dont-shade spindle;
	dont-shade turret;
	dont-shade stand;
	fire=1;
	start-script SmokeUnit();
	}

PositionSpindle()
	{
	if (fire==1) {
		turn spindle to z-axis <0> speed <400>; }
	if (fire==2) {
		turn spindle to z-axis <120> speed <400>; }
	if (fire==3) {
		turn spindle to z-axis 0 - <120> speed <400>; }
	wait-for-turn spindle around z-axis;
	}

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn stand to y-axis heading speed <200>;
	turn turret to x-axis (0-pitch) speed <200>;
	call-script PositionSpindle();
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
	return(TRUE);
	}

FirePrimary()
	{
	var	barrelnum;
	barrelnum = fire;
	fire=fire+1;
	if (fire==4) {
		fire=1; }
//	show flare;
//	sleep 150;
//	hide flare;
	start-script PositionSpindle();
	}

QueryPrimary(piecenum)
	{
	piecenum=flare;
	}

SweetSpot(piecenum)
	{
	piecenum=base;
	}

AimFromPrimary(piecenum)
	{
	piecenum=turret;
	}

Killed( severity, corpsetype )
	{
	hide flare;
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type	BITMAPONLY | BITMAP1;
		explode flare type	BITMAPONLY | BITMAP2;
		explode gun1 type	BITMAPONLY | BITMAP3;
		explode gun2 type	BITMAPONLY | BITMAP4;
		explode gun3 type	BITMAPONLY | BITMAP5;
		explode spindle type	BITMAPONLY | BITMAP1;
		explode stand type	BITMAPONLY | BITMAP2;
		explode turret type	BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type	BITMAPONLY | BITMAP1;
		explode flare type	FALL | BITMAP2;
		explode gun1 type	FALL | BITMAP3;
		explode gun2 type	FALL | BITMAP4;
		explode gun3 type	FALL | BITMAP5;
		explode spindle type	FALL | BITMAP1;
		explode stand type	FALL | BITMAP2;
		explode turret type	SHATTER | BITMAP3;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type	BITMAPONLY | BITMAP1;
		explode flare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spindle type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode stand type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type	SHATTER | BITMAP3;
		return( 0 );
		}

	corpsetype = 3;
	explode base type	BITMAPONLY | BITMAP1;
	explode flare type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode spindle type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode stand type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
	return( 0 );
	}
