// Armamd script

piece base, dummy;

static-var	active,restore_delay,next_barrel;

#define SIG_AIM		2
#define SMOKEPIECE1 base
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "..\anim3d\corfmd\activatescr.bos"
#include "..\anim3d\corfmd\deactivatescr.bos"
#include "..\anim3d\corfmd\tuckscr.bos"
#include "..\anim3d\corfmd\reloadscr.bos"
#include "smokeunit.h"
#include "exptype.h"

Go()
	{
	dont-cache drawer;
	dont-cache dummy;
	dont-cache wedge;
	call-script activatescr();
	active = TRUE;
	}

Stop()
	{
	active = FALSE;
	call-script deactivatescr();
	cache drawer;
	cache dummy;
	cache wedge;
	}

#define ACTIVATECMD call-script Go();
#define DEACTIVATECMD call-script Stop();
#include "StateChg.h"	// Second time (of two)

Create()
	{
	dont-shade dummy;
	dont-shade drawer;
	dont-shade dummy;
	dont-shade wedge;

	call-script InitState();
	active = FALSE;
	restore_delay = 2000;
	start-script SmokeUnit();
	}

Activate()
	{
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	start-script RequestState( INACTIVE );
	}

SetMaxReloadTime(time)
	{
	restore_delay = time * 2;
	}

RestoreAfterDelay()
	{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState( INACTIVE );
	}

AimPrimary(heading,pitch)
	{
	start-script RequestState( ACTIVE );
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return(TRUE);
	}

FirePrimary()
	{
	hide dummy;
	sleep 1000;
	call-script tuckscr();
	sleep 1000;
	show dummy;
	call-script reloadscr();
	sleep 1000;
	}

QueryPrimary(piecenum)
	{
	piecenum=dummy;
	}

AimFromPrimary(piecenum)
	{
	piecenum=dummy;
	}

SweetSpot(piecenum)
	{
	piecenum=base;
	}

Killed( severity, corpsetype )
	{
	if (severity <= 25)
		{
		corpsetype = 1;

		// Blow off the pieces in varied ways
		explode base type	BITMAPONLY | BITMAP1;
		explode drawer type	BITMAPONLY | BITMAP2;
		explode dummy type	BITMAPONLY | BITMAP3;
		explode wedge type	BITMAPONLY | BITMAP4;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;

		// Blow off the pieces in varied ways
		explode base type	BITMAPONLY | BITMAP1;
		explode drawer type	SHATTER | BITMAP2;
		explode dummy type	BITMAPONLY | BITMAP3;
		explode wedge type	FALL | BITMAP4;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;

		// Blow off the pieces in varied ways
		explode base type	BITMAPONLY | BITMAP1;
		explode drawer type	SHATTER | BITMAP2;
		explode dummy type	BITMAPONLY | BITMAP3;
		explode wedge type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return( 0 );
		}

	corpsetype = 3;
	explode base type	BITMAPONLY | BITMAP1;
	explode drawer type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode dummy type	BITMAPONLY | BITMAP3;
	explode wedge type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return( 0 );
	}
